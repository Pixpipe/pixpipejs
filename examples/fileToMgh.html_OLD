<html>
<head>
  <title>File to MGH</title>

  <script src="../dist/pixpipe.js"></script>
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900" rel="stylesheet">
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <h1><a href="https://github.com/Pixpipe/pixpipejs"><span style="color: #ff91d7">Pixpipe</span><span style="color: #FFFFFF">js</span></a></h1>
  <p>
  This does the following :
  <ul>
    <li>open a local MGH file, using <code>pixpipe.FileToArrayBufferReader</code></li>
    <li>redirect the file buffer into a <code>pixpipe.MghDecoder</code> to extract MGH dataset and metadata</li>
    <li>get the output as a generique <code>pixpipe.MniVolume</code> object</li>
    <li><code>slice()</code> the volume 3 times, along 3 given axis to get 3 <code>pixpipe.Image2D</code> objects</li>
    <li>display the images in separate canvas using a single instance of <code>pixpipe.CanvasImageWriter</code></li>
  </ul>

  </p>

  <div>
		Select an file:
		<input type="file" id="fileInput">
    <br>
    <span id="fileInfo"></span>
	</div>

  <div id="myDiv_x"></div>
  <div id="myDiv_y"></div>
  <div id="myDiv_z"></div>

  <script>
  window.onload = function() {

    var fileInput = document.getElementById('fileInput');

    // The filter to read image from URL
    var file2Buff = new pixpipe.FileToArrayBufferReader();

    // the image is loaded...
    // here, this = url2ImgFilter
    file2Buff.on("ready", function(){

      var filenames = this.getMetadata("filenames");

      var mghBuff = this.getOutput();

      var mghDecoder = new pixpipe.MghDecoder();
      mghDecoder.addInput( mghBuff );
      mghDecoder.update();

      

      var mniVolume = mghDecoder.getOutput();

      if(mniVolume){
        // create a filter to write the image into a canvas
        var imageToCanvasFilter = new pixpipe.CanvasImageWriter( );
        // replace the default min max values of [0, 255]
        imageToCanvasFilter.setMetadata("min", mniVolume.getMetadata("voxel_min"));
        imageToCanvasFilter.setMetadata("max", mniVolume.getMetadata("voxel_max"));

        // display sagital
        imageToCanvasFilter.setMetadata( "parentDivID", "myDiv_x" );
        imageToCanvasFilter.addInput( mniVolume.getSlice("xspace", 80) );
        imageToCanvasFilter.update();

        // display coronal
        imageToCanvasFilter.setMetadata( "parentDivID", "myDiv_y" );
        imageToCanvasFilter.addInput( mniVolume.getSlice("yspace", 128) );
        imageToCanvasFilter.update();

        // display axial
        imageToCanvasFilter.setMetadata( "parentDivID", "myDiv_z" );
        imageToCanvasFilter.addInput( mniVolume.getSlice("zspace", 128) );
        imageToCanvasFilter.update();
      }else{
        console.warn("Non-existant output for mghDecoder.");
      }
    });


    // event listener of the file input
    fileInput.addEventListener('change', function(e) {
      var files = e.target.files;
      var filenames = {};

      for(var i=0; i<files.length; i++){
        // set the input, an HTML5 File object and a category (ID)
        file2Buff.addInput(files[i], i);
        filenames[i] = files[i].name ;
      }

      file2Buff.setMetadata("filenames", filenames);

      // Perform the reading + conversion ibto ArrayBuffer
      file2Buff.update();
		});

  }
  </script>

</body>
</html>
